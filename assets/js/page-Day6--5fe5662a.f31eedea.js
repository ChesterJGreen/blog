(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{486:function(e,t,a){"use strict";a.r(t);var s=a(2),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"day-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#day-6"}},[e._v("#")]),e._v(" Day 6")]),e._v(" "),a("h2",{attrs:{id:"journal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#journal"}},[e._v("#")]),e._v(" Journal")]),e._v(" "),a("p",[e._v("We just turned in our first checkpoint this morning. That was a good experience. Although, I felt like I met all the requirements I was slightly worried about turning in my project. However, I did feel a sense of genuine concern that we simply tried rather than our efforts being forced to be perfect. I experienced a sense of relief and encouragement to know that as long as we try we should do just fine. That being said, moving into Javascript area has been a little difficult. My mind has felt a bit numb trying to pick up the different syntax styles and such. My mind eventually made the transition back into javascript jargon.\n"),a("a",{attrs:{href:"https://chesterjgreen.github.io/js-tests-basics/",target:"_blank",rel:"noopener noreferrer"}},[e._v("javascript basics homework"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"what-is-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-scope"}},[e._v("#")]),e._v(" What is Scope ?")]),e._v(" "),a("ul",[a("li",[e._v("scope is the different levels of a document. The scope can be general in the sense of the entire document. Or scope can be more fine tuned to focus on the area of code block.")])]),e._v(" "),a("h2",{attrs:{id:"what-is-hoisting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-hoisting"}},[e._v("#")]),e._v(" What is Hoisting ?")]),e._v(" "),a("ul",[a("li",[e._v("Hoisting is where the code invisbly makes a line of code standout because there is something to happen with that line of code when a more fine tuned reading comes back through. Hoisting is where the code may be recognized that it has made a declaration, but maybe didn't remember what has been defined until the code is more fully written.")])]),e._v(" "),a("h2",{attrs:{id:"in-what-cases-might-you-use-let-vs-const-vs-var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-what-cases-might-you-use-let-vs-const-vs-var"}},[e._v("#")]),e._v(" In what cases might you use let vs const vs var?")]),e._v(" "),a("ul",[a("li",[e._v("I would use let inside a code block or in most cases generally.")]),e._v(" "),a("li",[e._v("I would use var outside of code block and in cases where I may want to use the variable more generally.")]),e._v(" "),a("li",[e._v("I would use const in situations where I would not want to have the ability to change the value stored in a variable. Things that may be more permanent like physically permanent attributes on a person.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);